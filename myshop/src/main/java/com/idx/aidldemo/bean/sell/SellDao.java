package com.idx.aidldemo.bean.sell;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.idx.aidldemo.bean.order.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SELL".
*/
public class SellDao extends AbstractDao<Sell, Long> {

    public static final String TABLENAME = "SELL";

    /**
     * Properties of entity Sell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sell_id = new Property(0, Long.class, "sell_id", true, "_id");
        public final static Property Sell_name = new Property(1, String.class, "sell_name", false, "SELL_NAME");
        public final static Property Sell_count = new Property(2, int.class, "sell_count", false, "SELL_COUNT");
        public final static Property Sell_price = new Property(3, double.class, "sell_price", false, "SELL_PRICE");
        public final static Property OrderId = new Property(4, Long.class, "orderId", false, "ORDER_ID");
    }

    private Query<Sell> order_SellsQuery;

    public SellDao(DaoConfig config) {
        super(config);
    }
    
    public SellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SELL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sell_id
                "\"SELL_NAME\" TEXT," + // 1: sell_name
                "\"SELL_COUNT\" INTEGER NOT NULL ," + // 2: sell_count
                "\"SELL_PRICE\" REAL NOT NULL ," + // 3: sell_price
                "\"ORDER_ID\" INTEGER);"); // 4: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SELL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sell entity) {
        stmt.clearBindings();
 
        Long sell_id = entity.getSell_id();
        if (sell_id != null) {
            stmt.bindLong(1, sell_id);
        }
 
        String sell_name = entity.getSell_name();
        if (sell_name != null) {
            stmt.bindString(2, sell_name);
        }
        stmt.bindLong(3, entity.getSell_count());
        stmt.bindDouble(4, entity.getSell_price());
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(5, orderId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sell entity) {
        stmt.clearBindings();
 
        Long sell_id = entity.getSell_id();
        if (sell_id != null) {
            stmt.bindLong(1, sell_id);
        }
 
        String sell_name = entity.getSell_name();
        if (sell_name != null) {
            stmt.bindString(2, sell_name);
        }
        stmt.bindLong(3, entity.getSell_count());
        stmt.bindDouble(4, entity.getSell_price());
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(5, orderId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sell readEntity(Cursor cursor, int offset) {
        Sell entity = new Sell( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sell_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sell_name
            cursor.getInt(offset + 2), // sell_count
            cursor.getDouble(offset + 3), // sell_price
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // orderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sell entity, int offset) {
        entity.setSell_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSell_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSell_count(cursor.getInt(offset + 2));
        entity.setSell_price(cursor.getDouble(offset + 3));
        entity.setOrderId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sell entity, long rowId) {
        entity.setSell_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sell entity) {
        if(entity != null) {
            return entity.getSell_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sell entity) {
        return entity.getSell_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sells" to-many relationship of Order. */
    public List<Sell> _queryOrder_Sells(Long orderId) {
        synchronized (this) {
            if (order_SellsQuery == null) {
                QueryBuilder<Sell> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderId.eq(null));
                order_SellsQuery = queryBuilder.build();
            }
        }
        Query<Sell> query = order_SellsQuery.forCurrentThread();
        query.setParameter(0, orderId);
        return query.list();
    }

}
